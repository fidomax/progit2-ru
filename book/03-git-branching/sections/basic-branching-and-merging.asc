=== Основы ветвления и слияния

Давайте рассмотрим простой пример рабочего процесса, который может быть полезен в вашем проекте.
Ваша работа построена так:

. Работаете над сайтом.
. Создаете ветку для новой статьи, которую вы пишите.
. Работаете в этой ветке.

В этот момент вы получаете сообщение, что обнаружена критическая ошибка, требующая скорейшего исправления.
Ваши действия:

. Переключиться на основную ветку.
. Создать ветку для добавления исправления.
. После тестирования слить ветку содержащую исправление с основной веткой.
. Переключиться назад в ту ветку где вы пишите статью и продолжить работать.

[[_basic_branching]]
==== Основы ветвления

(((branches, basic workflow)))
Предположим, вы работаете над проектом и уже имеете несколько коммитов.

.Простая история коммитов
image::images/basic-branching-1.png[Простая история коммитов.]

Вы решаете, что теперь вы будете заниматься проблемой №53 из вашей системы отслеживания ошибок.
Чтобы создать ветку и сразу переключиться на нее, вы можете выполнить команду `git checkout` с параметром `-b`:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

Это тоже самое что и:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Создание нового указателя ветки
image::images/basic-branching-2.png[Создание нового указателя ветки.]

Вы работаете над вашим сайтом и делаете коммиты.
Это приводит к тому что ветка `iss53` движется вперед, так как вы перключились на нее ранее (`HEAD` указывает на нее).

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

.Ветка iss53 двигается вперед 
image::images/basic-branching-3.png[Ветка iss53 двигается вперед.]

Тут вы получаете сообщение об обнаружении уязвимости на вашем сайте, которую нужно немедленно устранить.
Благодаря Git, вы не должны размещать это исправление вместе с тем что вы сделали в `iss53`. Вам даже не придется прилагать усилий, чтобы откатить все эти изменения для начала работы над исправлением.
Все что вам нужно - переключиться на ветку `master`.

Но перед тем как сделать это - имейте ввиду, что если ваш рабочий каталог, либо область подготовленных файлов содержит изменения не попавшие в коммит и конфликтующие с веткой, на которую вы хотите переключиться, то Git н позволит вам перключить ветки.
Лучше всего иметь чистое рабочее состояние проекта перед перключением.
Есть несколько способов обойти это (а именно: прятанье (stash) и исправление коммитов (amend)), но об этом мы поговорим позже в главе <<_git_stashing>>.
Теперь предположим, что вы зафиксировали все свои изменения и можете переключиться на основную ветку:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

С этого момента ваш рабочий каталог имеет точно такой же вид, какой был перед началом работы над проблемой №53. Теперь вы можете сосредоточиться на работе над исправлением.
Важно запомнить: когда вы переключаете ветки, Git возвращает состояние рабочего каталога к тому виду, какой он имел в момент последнего коммита в эту ветку.
Он добавляет, удаляет и изменячет файлы автоматически чтобы состояние рабочего каталога соответствовало тому, когда был сделан последний коммит.

Теперь вы можете перейти к написанию исправления.
Давайте создадим новую ветку для исправления, в которой будем работать, пока не закончим исправление.

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

.Ветка hotfix основана на ветке `master`
image::images/basic-branching-4.png[Ветка hotfix основана на ветке `master`.]

Вы можете выполнить свои тесты, чтобы убедиться что ваше исправление делает именно то, что нужно. И если это так - выполнить слияние (merge) с основной веткой для включения в продукт.
Это делается командой `git merge`:(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Вы заметили фразу ``fast-forward'' в этом слиянии?
Из-за того, что коммит, на который указывала ветка, которую вы слили был прямым потомком того коммита, на котором вы находились, Git просто перместил указатель ветки вперед.
Другими словами, когда вы пытаетесь выполнить слияние одного комита с другим, которого можно достичь просто двигаясь по истории от первого коммита, Git упрощает операцию путем передвижения указателя метки вперед, так как нет разветвления в работе - это называется ``fast-forwar`` (быстрая перемотка).
Ваши изменения теперь в снимке (snapshot) коммита на который указывает ветка `master`, и можно внедрить исправления в продукт.

.`master` is fast-forwarded to `hotfix`
image::images/basic-branching-5.png[`master` is fast-forwarded to `hotfix`.]

После внедрения вашего архиважного исправления вы готовы вернуться к работе над тем, что были вынуждены отложить.
Как бы то ни было, сначала нужно удалить ветку `hotfix`, потому что она больше не нужна - ветка `master` указывает на то же самое место.
Для удаления ветки выполните команду `git branch` с параметром `-d`:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Теперь вы можете перключить ветку и вернуться к работе над своей проблемой №53

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Продолжение работы над `iss53`
image::images/basic-branching-6.png[Продолженеи работы над `iss53`.]

Стоит обратить внимание на то, что все изменения в ветке `hotfix` не включены в вашу ветку `iss53`.
Если вам нужно включить их, вы можете слить ветку `master` в вашу ветку `iss53` командой `git merge master`, или же вы можете отложить слияние этих изменеий до завершения работы и затем влить ветку `iss53` в `master`.

[[_basic_merging]]
==== Основы слияния

(((branches, merging)))(((merging)))
Предположим вы решили что работа по проблеме №53 закончена и ее можно влить в ветку `master`.
Для этого нужно выполнить слияние ветки `iss53` точно так же как вы делали это с веткой `hotfix` ранее.
Все что нужно сделать - переключиться на ветку, в которую вы хотите включить изменения и выполните команду `git merge`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

Результат этой операции отличается от результата слияния ветки `hotfix`.
В данном случаем мы имеем разветвление истории работы.
Так как коммит, на котором мы находимся не является прямым потомком ветки, с которой мы выполняем слияние, Git вынужден немного потрудиться.
В этом случаее Git выполняет простое трехстороннее слияние двух слепков (snapshot) сливаемых веток и общий для двух веток родительский слепок.

.Использование трех слепков при слиянии
image::images/basic-merging-1.png[Использование трех слепков при слиянии.]

Вместо того, чтобы просто передвинуть указатель ветки вперед, Git создал новый слепок, являющийся результатом трехстороннего слияния, а затем автоматически делает коммит.
Такой особенный коммит называю коммит слияния, так как он имеет более одного предка.

.Коммит слияния
image::images/basic-merging-2.png[Коммит слияния.]

Стоит отметить, что Git определяет наилучшего общего предка в качестве основы слияния; в этом заключается отличие от старых инструментов, таких как CVS или Subversion (до версии 1.5), где выполняющий слияние разработчик должен был сам указывать основу для слияния.
This makes merging a heck of a lot easier in Git than in these other systems.

Now that your work is merged in, you have no further need for the `iss53` branch.
You can close the ticket in your ticket-tracking system, and delete the branch:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== Basic Merge Conflicts

(((merging, conflicts)))
Occasionally, this process doesn't go smoothly.
If you changed the same part of the same file differently in the two branches you're merging together, Git won't be able to merge them cleanly.
If your fix for issue #53 modified the same part of a file as the `hotfix`, you'll get a merge conflict that looks something like this:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Git hasn't automatically created a new merge commit.
It has paused the process while you resolve the conflict.
If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Anything that has merge conflicts and hasn't been resolved is listed as unmerged.
Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.
Your file contains a section that looks something like this:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.
In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.
For instance, you might resolve this conflict by replacing the entire block with this:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

This resolution has a little of each section, and the `<<<<<<<`, `=======`, and `>>>>>>>` lines have been completely removed.
After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.
Staging the file marks it as resolved in Git.

If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on a Mac), you can see all the supported tools listed at the top after ``one of the following tools.''
Just type the name of the tool you'd rather use.

[NOTE]
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<_advanced_merging>>.
====

After you exit the merge tool, Git asks you if the merge was successful.
If you tell the script that it was, it stages the file to mark it as resolved for you.
You can run `git status` again to verify that all conflicts have been resolved:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.
The commit message by default looks something like this:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

You can modify that message with details about how you resolved the merge if you think it would be helpful to others looking at this merge in the future – why you did what you did, if it's not obvious.
