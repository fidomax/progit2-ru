[[r_setting_up_server]]
=== Настраиваем сервер

Давайте рассмотрим настройку доступа по SSH на стороне сервера.
В этом примере мы будем использовать метод `authorized_keys` для аутентификации пользователей.
Мы подразумеваем, что вы используете стандартный дистрибутив Linux типа Ubuntu.
Для начала создадим пользователя `git` и каталог `.ssh` для этого пользователя:

[source,console]
----
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh && chmod 700 .ssh
$ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
----

Затем вам нужно добавить открытый SSH-ключ некоторого разработчика в файл `authorized_keys` пользователя `git`.
Предположим, вы уже получили несколько ключей и сохранили их во временные файлы.
Напомню, открытый ключ выглядит как-то так:

[source,console]
----
$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
----

Вы просто добавляете их в файл `authorized_keys` пользователя `git` в его каталоге `.ssh`:

[source,console]
----
$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
----

Теперь вы можете создать пустой репозиторий для них, запустив `git init` с параметром `--bare`, что инициализирует репозиторий без рабочего каталога:(((git commands, init, bare)))

[source,console]
----
$ cd /opt/git
$ mkdir project.git
$ cd project.git
$ git init --bare
Initialized empty Git repository in /opt/git/project.git/
----

Затем Джон, Джози или Джессика могут отправить первую версию своего проекта в этот репозиторий, добавив его как удаленный и отправив ветку.
Заметьте, что кто-то должен заходить на сервер и создавать голый репозиторий каждый раз, когда вы хотите добавить проект.
Пусть `gitserver` ― имя хоста сервера, на котором вы создали пользователя `git` и репозиторий.
Если он находится в вашей внутренней сети, вы можете настроить запись DNS для `gitserver`, ссылающуюся на этот сервер, и использовать эти команды(считая что `myproject` это существующий проект с файлами):

[source,console]
----
# На компьютере Джона
$ cd myproject
$ git init
$ git add .
$ git commit -m 'initial commit'
$ git remote add origin git@gitserver:/opt/git/project.git
$ git push origin master
----

Теперь остальные могут клонировать его и отправлять (push) туда изменения так же легко:

[source,console]
----
$ git clone git@gitserver:/opt/git/project.git
$ cd project
$ vim README
$ git commit -am 'fix for the README file'
$ git push origin master
----

Этим способом вы можете быстро получить Git-сервер с доступом на чтение/запись для небольшой группы разработчиков.

Заметьте, что теперь все эти пользователи могут заходить на сервер как пользователь `git`. Чтобы это предотвратить, нужно изменить ему оболочку на что-то другое в файле `passwd`.

Вы можете легко ограничить пользователя `git` только действиями, связанными с Git, с помощью ограниченной оболочки `git-shell`, поставляемой вместе с Git.
Если вы выставите её в качестве командного интерпретатора пользователя `git`, то этот пользователь не сможет получить доступ к обычной командной оболочке на вашем сервере.
Чтобы её использовать, укажите `git-shell` вместо bash или csh в качестве командной оболочки пользователя.
Для этого вы должны сначала добавить `git-shell` в `/etc/shells` если её там ещё нет:

[source,console]
----
$ cat /etc/shells   # посмотрим, присутствует ли `git-shell`. Если нет...
$ which git-shell   # проверим, что git-shell установлена.
$ sudo vim /etc/shells  # и добавим путь к git-shell из предыдущей команды
----

Теперь можно изменить оболочку для пользователя используя `chsh <username>`:

[source,console]
----
$ sudo chsh git  # и вводим путь к git-shell, обычно /usr/bin/git-shell
----

Теперь пользователь `git` может использовать SSH соединение только для работы с репозиториями Git и не может зайти на машину.
Вы можете попробовать и увидите, что вход в систему отклонен:

[source,console]
----
$ ssh git@gitserver
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to gitserver closed.
----

Теперь сетевые команды Git будут работать, но пользователи не смогут заходить на сервер.
Как указывает вывод, вы также можете изменить домашний каталог пользователя `git`, чтобы немного изменить поведение `git-shell`.
Например, вы можете ограничить команды Git, которые сервер будет принимать или сообщение которое увидят пользователи если попробуют зайти по SSH.
Запустите `git help shell` для получения дополнительной информации.(((git commands, help)))
